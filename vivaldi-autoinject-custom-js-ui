#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
vivaldi-autoinject-custom-js-ui - version: 2020.11.22.9
updated: 2020-11-22 by budRich
EOB
}



# in makefile m4 will expand PREFIX
# before installation
if [[ -d PREFIX ]]; then
  _prefix='PREFIX'
else
  _prefix=/usr
fi

_source=$(readlink -f "${BASH_SOURCE[0]}")

_vivaldi=$(readlink -f "$(which vivaldi-stable)")
: "${_vivaldi:=$(readlink -f "$(which vivaldi-snapshot)")}"

_optd=${_vivaldi%/*}/resources/vivaldi
_shared=$_prefix/share/vivaldi-ui-js

_trg=$_optd/window.html

main() {

  ((__o[list])) && {
    ls -A "$_shared"
    exit
  }

  ((EUID)) && ERX \
    "script needs to be executed as root (sudo)"

  [[ -f $_trg ]] || ERX \
    "could not find $_trg, is vivaldi installed?"

  readonly _tmp=$(mktemp)
  trap 'rm -f "$_tmp"' EXIT SIGINT

  cp -f "$_trg" "$_tmp"

  if [[ -n ${__o[remove]} ]]; then
    removefile "${__o[remove]}"
  else
    addfiles "$@"
  fi

  cp -f "$_tmp" "$_trg"

  installhook
}

___printhelp(){
  
cat << 'EOB' >&2
vivaldi-autoinject-custom-js-ui - manage custom js UI mods for the vivaldi web browser


SYNOPSIS
--------
vivaldi-autoinject-custom-js-ui [--remove|-r FILENAME] [FILES ...]
vivaldi-autoinject-custom-js-ui --list|-l
vivaldi-autoinject-custom-js-ui --help|-h
vivaldi-autoinject-custom-js-ui --version|-v

OPTIONS
-------

--remove|-r FILENAME  
Remove FILENAME.

--list|-l  
Prints all installed js modifications.


--help|-h  
Show help and exit.


--version|-v  
Show version and exit.

EOB
}


addfiles() {

  declare -a files

  # make sure all files to add have .js suffix
  for f in "$@" "$_shared"/*.js ; do
    [[ -f $f && $f =~ [.]js$ ]] && files+=("$f")
  done

  ((${#files[@]})) || ERX \
    "could not find any js files to inject." \
    "add files to $_shared"                  \
    "or as arguments to this command"

  mkdir -p "$_shared"
  
  for f in "${files[@]}"; do
    str=$(printf '<script src="%s"></script>' "${f##*/}")
    cp -f "$f" "$_optd"

    # files passed as arguments overwrites existing
    # files in /usr/share/vivaldi-ui-js
    [[ $f = "$_shared/${f##*/}" ]] \
      || cp -f "$f" "$_shared"

    # adds entry in window.html if it doesn't exist
    grep "$str" "$_tmp" >/dev/null \
      || sed -ri "s|([[:space:]]*)(</body>)|\1\1$str\n\1\2|" "$_tmp"
  done
}
set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERM(){

  local mode OPTIND

  getopts xr mode
  case "$mode" in
    x ) urg=critical ; prefix='[ERROR]: '   ;;
    r ) urg=low      ; prefix='[WARNING]: ' ;;
    * ) urg=normal   ; mode=m ;;
  esac
  shift $((OPTIND-1))

  msg="${prefix}$*"

  if [[ -t 2 ]]; then
    echo "$msg" >&2
  else
    notify-send -u "$urg" "$msg"
  fi

  [[ $mode = x ]] && exit 98
}

ERX() { ERM -x "$*" ;}
ERR() { ERM -r "$*" ;}
ERH(){
  {
    ___printhelp 
    [[ -n "$*" ]] && printf '\n%s\n' "$*"
  } >&2 
  exit 77
}

# if this is script is executed on a Arch install
# a hook to automatically update vivaldis UI is added
installhook() {

local hookpath=$_prefix/share/libalpm/hooks/vivaldi-ui-js.hook

[[ -d ${hookpath%/*} && ! -f $hookpath ]] || return

cat << EOB > "$hookpath"
[Trigger]
Type = Path
Operation = Install
Operation = Upgrade
Target = ${_trg#/}

[Action]
Description = injecting custom javascript
When = PostTransaction
Exec = ${_source}
EOB
}

removefile() {

  local trg=${1##*/}
  local sharef="$_shared/$trg"
  local optf="$_optd/$trg"

  [[ -f $sharef ]] \
    || ERX "file $sharef not found"

  rm -f "$sharef" "$optf"

  str=$(printf '<script src="%s"></script>' "$trg")

  grep -v "$str" "$_trg" > "$_tmp"
}

declare -A __o
options="$(
  getopt --name "[ERROR]:vivaldi-autoinject-custom-js-ui" \
    --options "r:lhv" \
    --longoptions "remove:,list,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --remove     | -r ) __o[remove]="${2:-}" ; shift ;;
    --list       | -l ) __o[list]=1 ;; 
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@:-}"


